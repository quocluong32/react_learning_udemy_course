{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\n\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : 'GET',\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error('Request failed!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || 'Something went wrong!');\n    }\n\n    setIsLoading(false);\n  };\n\n  return {\n    isLoading: isLoading,\n    error: error,\n    sendRequest: sendRequest\n  };\n};\n\n_s(useHttp, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Users/Quoc Luong/Desktop/udemy/React-connecting-to-database/04-onwards-to-a-more-realistic-example/04-onwards-to-a-more-realistic-example/src/hooks/use-http.js"],"names":["React","useState","useEffect","useHttp","requestConfig","applyData","isLoading","setIsLoading","error","setError","sendRequest","taskText","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,OAAO,GAAG,CAACC,aAAD,EAAgBC,SAAhB,KAA8B;AAAA;;AAC5C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMS,WAAW,GAAG,MAAOC,QAAP,IAAoB;AACtCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAC1BT,aAAa,CAACU,GADY,EACP;AACfC,QAAAA,MAAM,EAAEX,aAAa,CAACW,MAAd,GAAuBX,aAAa,CAACW,MAArC,GAA8C,KADvC;AAEfC,QAAAA,OAAO,EAAEZ,aAAa,CAACY,OAAd,GAAwBZ,aAAa,CAACY,OAAtC,GAAgD,EAF1C;AAGfC,QAAAA,IAAI,EAAEb,aAAa,CAACa,IAAd,GAAoBC,IAAI,CAACC,SAAL,CAAef,aAAa,CAACa,IAA7B,CAApB,GAAyD;AAHhD,OADO,CAA5B;;AAQA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AAEAlB,MAAAA,SAAS,CAACiB,IAAD,CAAT;AAED,KAjBD,CAiBE,OAAOE,GAAP,EAAY;AACZf,MAAAA,QAAQ,CAACe,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDlB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAxBD;;AA0BE,SAAO;AACHD,IAAAA,SAAS,EAAEA,SADR;AAEHE,IAAAA,KAAK,EAAEA,KAFJ;AAGHE,IAAAA,WAAW,EAAEA;AAHV,GAAP;AAKH,CAnCD;;GAAMP,O;;AAqCN,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst useHttp = (requestConfig, applyData) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const sendRequest = async (taskText) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n    try {\r\n      const response = await fetch(\r\n        requestConfig.url, {\r\n            method: requestConfig.method ? requestConfig.method : 'GET',\r\n            headers: requestConfig.headers ? requestConfig.headers : {},\r\n            body: requestConfig.body? JSON.stringify(requestConfig.body) : null\r\n        }\r\n      );\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Request failed!');\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      applyData(data);\r\n\r\n    } catch (err) {\r\n      setError(err.message || 'Something went wrong!');\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n    return {\r\n        isLoading: isLoading,\r\n        error: error,\r\n        sendRequest: sendRequest\r\n    }\r\n};\r\n\r\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}