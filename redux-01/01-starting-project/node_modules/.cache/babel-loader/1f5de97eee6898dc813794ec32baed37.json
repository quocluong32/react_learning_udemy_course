{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\ncreateSlice({\n  name: 'authentication',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n});\n/* const counterReducer = (state = initialState, action) => {\r\n    if (action.type === 'increment') {\r\n        return {\r\n            counter: state.counter + action.amount,\r\n            showCounter: state.showCounter\r\n        }\r\n    }\r\n\r\n    if (action.type === 'decrement') {\r\n        return {\r\n            counter: state.counter - 1,\r\n            showCounter: state.showCounter\r\n        }\r\n    }\r\n\r\n    if (action.type === 'toggle') {\r\n        return {\r\n            ...state,\r\n            showCounter: !state.showCounter\r\n        }\r\n    }\r\n\r\n    return state;\r\n} */\n\nconst store = configureStore({\n  reducer: counterSlice.reducer\n});\nexport const counterAction = counterSlice.actions;\nexport default store;","map":{"version":3,"sources":["C:/Users/Quoc Luong/Desktop/udemy/redux-01/01-starting-project/src/store/index.js"],"names":["createStore","createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuthenticated","login","logout","store","reducer","counterAction","actions"],"mappings":"AAAA,SAASA,WAAT,QAA8B,OAA9B;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AAGA,MAAMC,mBAAmB,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAA5B;AAEA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC7BM,EAAAA,IAAI,EAAE,SADuB;AAE7BC,EAAAA,YAAY,EAAEL,mBAFe;AAG7BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACP,OAAN;AACH,KAHK;;AAINQ,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACP,OAAN;AACH,KANK;;AAONS,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACpBH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC;AACH,KATK;;AAUNC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;AACH;;AAZK;AAHmB,CAAD,CAAhC;AAoBA,MAAMY,gBAAgB,GAAG;AACrBC,EAAAA,eAAe,EAAE;AADI,CAAzB;AAIAjB,WAAW,CAAC;AACRM,EAAAA,IAAI,EAAE,gBADE;AAERC,EAAAA,YAAY,EAAES,gBAFN;AAGRR,EAAAA,QAAQ,EAAE;AACNU,IAAAA,KAAK,CAACR,KAAD,EAAQ;AACTA,MAAAA,KAAK,CAACO,eAAN,GAAwB,IAAxB;AACH,KAHK;;AAINE,IAAAA,MAAM,CAACT,KAAD,EAAQ;AACVA,MAAAA,KAAK,CAACO,eAAN,GAAwB,KAAxB;AACH;;AANK;AAHF,CAAD,CAAX;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMG,KAAK,GAAGnB,cAAc,CAAC;AACzBoB,EAAAA,OAAO,EAAEhB,YAAY,CAACgB;AADG,CAAD,CAA5B;AAIA,OAAO,MAAMC,aAAa,GAAGjB,YAAY,CAACkB,OAAnC;AAEP,eAAeH,KAAf","sourcesContent":["import { createStore,  } from 'redux';\r\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\r\n\r\n\r\nconst initialCounterState = { counter: 0, showCounter: true };\r\n\r\nconst counterSlice = createSlice({\r\n    name: 'counter',\r\n    initialState: initialCounterState,\r\n    reducers: {\r\n        increment(state) {\r\n            state.counter++;\r\n        },\r\n        decrement(state) {\r\n            state.counter--;\r\n        },\r\n        increase(state, action) {\r\n            state.counter = state.counter + action.payload;\r\n        },\r\n        toggleCounter(state) {\r\n            state.showCounter = !state.showCounter;\r\n        }\r\n\r\n    }\r\n});\r\n\r\nconst initialAuthState = {\r\n    isAuthenticated: false,\r\n}\r\n\r\ncreateSlice({\r\n    name: 'authentication',\r\n    initialState: initialAuthState,\r\n    reducers: {\r\n        login(state) {\r\n            state.isAuthenticated = true;\r\n        },\r\n        logout(state) {\r\n            state.isAuthenticated = false;\r\n        }\r\n\r\n    }\r\n})\r\n\r\n/* const counterReducer = (state = initialState, action) => {\r\n    if (action.type === 'increment') {\r\n        return {\r\n            counter: state.counter + action.amount,\r\n            showCounter: state.showCounter\r\n        }\r\n    }\r\n\r\n    if (action.type === 'decrement') {\r\n        return {\r\n            counter: state.counter - 1,\r\n            showCounter: state.showCounter\r\n        }\r\n    }\r\n\r\n    if (action.type === 'toggle') {\r\n        return {\r\n            ...state,\r\n            showCounter: !state.showCounter\r\n        }\r\n    }\r\n\r\n    return state;\r\n} */\r\n\r\nconst store = configureStore({\r\n    reducer: counterSlice.reducer,\r\n});\r\n\r\nexport const counterAction = counterSlice.actions;\r\n\r\nexport default store;\r\n\r\n"]},"metadata":{},"sourceType":"module"}